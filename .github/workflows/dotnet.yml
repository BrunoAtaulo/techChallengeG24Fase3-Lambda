name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Install AWS Lambda .NET CLI Tools
        run: dotnet tool install -g Amazon.Lambda.Tools
      
      - name: Restore NuGet packages
        run: dotnet restore AWS_lambda_Auth/AWS_lambda_Auth.csproj
    
      - name: Build
        run: dotnet build AWS_lambda_Auth/AWS_lambda_Auth.csproj --no-restore

      - name: Prepare package
        run: dotnet lambda package --project-location AWS_lambda_Auth/ --output-package AWS_lambda_Auth.zip --configuration Release --framework net8.0 --no-package-restore --msbuild-parameters "/p:CopyLocalLockFileAssemblies=true"
      
      - name: Extract serverless.template
        run: unzip -j AWS_lambda_Auth.zip 'serverless.template' -d AWS_lambda_Auth
        
      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-north-1
          COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
          COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        run: |
          dotnet lambda deploy-serverless \
          --template serverless.template \
          --package ./AWS_lambda_Auth.zip \
          --s3-bucket s3lambdaapplication \
          --template serverless.template \
          --region eu-north-1 \
          --runtime dotnet8 \
          --environment-variables "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }},AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }},COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }},COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}"
